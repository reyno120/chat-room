[{"C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\index.js":"1","C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\App.js":"2","C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\reportWebVitals.js":"3","C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\components\\Homepage.jsx":"4","C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\components\\Chatroom.jsx":"5"},{"size":500,"mtime":1612132572860,"results":"6","hashOfConfig":"7"},{"size":1725,"mtime":1613071913459,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":5649,"mtime":1613074762548,"results":"10","hashOfConfig":"7"},{"size":5281,"mtime":1613075045503,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"axctrv",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\index.js",[],["25","26"],"C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\App.js",[],"C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\reportWebVitals.js",[],"C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\components\\Homepage.jsx",[],"C:\\Users\\jmrey\\OneDrive\\Desktop\\Programmin Stuff\\Projects\\chat-room\\client\\src\\components\\Chatroom.jsx",["27"],"import '../css/chatroom.css';\r\n// import React, { useState, useEffect } from 'react';\r\nimport React, { Component } from 'react';\r\nimport chatIcon from '../images/chat-icon.svg';\r\nimport returnIcon from '../images/return-icon.svg';\r\n\r\n\r\nclass Chatroom extends Component {\r\n    state = { \r\n        users: [],\r\n        currentMessage: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.socket.on('message', msg => {\r\n            // console.log(msg);\r\n\r\n            /* \r\n            <div className=\"user-message\" || 'group-message'>\r\n                <p className=\"message-header\">{timeP}</p>\r\n                <p className=\"message\">{message}</p>\r\n             </div> \r\n             */\r\n\r\n            // create message p\r\n            var message = document.createElement('p');\r\n            message.innerText = msg.msg;\r\n            message.classList.add('message');\r\n\r\n            // create header p\r\n            const messageHeader = document.createElement('p');\r\n            messageHeader.classList.add(\"message-header\");\r\n            messageHeader.innerHTML = `${msg.user}<span> - ${msg.time}</span>`;\r\n\r\n            // create new div and append header and message\r\n            const div = document.createElement('div');\r\n            div.style.width = this.props.username.length > message.innerText.length ? \r\n                              this.props.username.length * 16 + 'px' : \r\n                              message.innerText.length * 16 + 'px';     // set message box based off text length\r\n            this.props.username === msg.user ? div.classList.add('user-message') :\r\n                                           div.classList.add('group-message');\r\n\r\n\r\n\r\n            // the following creates a new container with display: flex and appends it to\r\n            // the chatroom-messages so that user messages are pushed right and\r\n            // group messages are push left\r\n            var element = document.getElementsByClassName(\"chatroom-messages\")[0];\r\n            div.appendChild(messageHeader);\r\n            div.appendChild(message);\r\n\r\n            var container = document.createElement('div');\r\n            container.classList.add('new-message-container');\r\n            var newDiv = document.createElement('div');\r\n\r\n            if(this.props.username === msg.user) {\r\n                container.appendChild(newDiv);\r\n                container.appendChild(div);\r\n            }\r\n            else {\r\n                container.appendChild(div);\r\n                container.appendChild(newDiv);\r\n            }\r\n            // element.appendChild(div);\r\n            element.appendChild(container);\r\n\r\n\r\n\r\n            element.scrollTop = element.scrollHeight;   // always scroll to bottom of messages\r\n        });\r\n\r\n        this.props.socket.on('roomDetails', roomUsers => {\r\n            this.setState({users: roomUsers});\r\n        });\r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.setState({currentMessage: e.target.value});\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(this.state.currentMessage !== '') {\r\n            this.props.socket.emit('chat message', {\r\n                msg: this.state.currentMessage, \r\n                user: this.props.username, \r\n                room: this.props.room\r\n            });\r\n        }\r\n\r\n        this.setState({currentMessage: ''});\r\n    }\r\n\r\n\r\n    render() { \r\n        return (  \r\n            <div className={`chatroom ${this.props.transition}`}>\r\n                <div className=\"chatroom-header\">\r\n                    <img id=\"chat-icon\" src={chatIcon} alt=\"chat icon\" />\r\n                    <p>Chatroom {this.props.room}</p>\r\n                    <div className=\"leave-room-button-container\">\r\n                        <button onClick={this.props.handleClick}>Leave Room</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"chatroom-body\">\r\n                    <div className=\"chatroom-users\">\r\n                        <h1>{this.props.username}</h1>\r\n                        <div className=\"chatroom-users-list\">\r\n                            {\r\n                                this.state.users.map((user) => \r\n                                    {if(user.username !== this.props.username) return (\r\n                                        <p key={user.username}>{user.username}</p>\r\n                                    )}\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"chatroom-messages-container\">\r\n\r\n                        <div className=\"chatroom-messages\"></div>\r\n\r\n                        <div className=\"chatroom-input\">\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <input value={this.state.currentMessage} onChange={this.handleChange} placeholder=\"Type something...\" />\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"return-button\" onClick={this.handleSubmit}>\r\n                                <img src={returnIcon} alt=\"Return arrow\" />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Chatroom;",["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":113,"column":61,"nodeType":"36","messageId":"37","endLine":113,"endColumn":63},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["40"],["41"],"no-global-assign","no-unsafe-negation"]